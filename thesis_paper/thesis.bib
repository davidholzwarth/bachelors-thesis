@misc{behrensCircularDelegationsMyth2015,
  title = {Circular {{Delegations}} -- {{Myth}} or {{Disaster}}?},
  author = {Behrens, Jan},
  year = {2015},
  month = jan,
  publisher = {The Liquid Democracy Journal},
  urldate = {2025-06-18}
}

@misc{behrensPreferentialDelegationProblem2015,
  title = {Preferential {{Delegation}} and the {{Problem}} of {{Negative Voting Weight}}},
  author = {Behrens, Jan and Swierczek, Bj{\"o}rn},
  year = {2015},
  month = jan,
  publisher = {The Liquid Democracy Journal}
}

@misc{bersetcheGeneralizingLiquidDemocracy2022,
  title = {Generalizing {{Liquid Democracy}} to Multi-Agent Delegation: {{A Voting Power Measure}} and {{Equilibrium Analysis}}},
  shorttitle = {Generalizing {{Liquid Democracy}} to Multi-Agent Delegation},
  author = {Bersetche, Francisco M.},
  year = {2022},
  publisher = {arXiv},
  doi = {10.48550/ARXIV.2209.14128},
  urldate = {2025-06-03},
  abstract = {In this study, we propose a generalization of the classic model of liquid democracy that allows fractional delegation of voting weight, while simultaneously allowing for the existence of equilibrium states. Our approach empowers agents to partition and delegate their votes to multiple representatives, all while retaining a fraction of the voting power for themselves. We introduce a penalty mechanism for the length of delegation chains. We discuss the desirable properties of a reasonable generalization of the classic model, and prove that smaller penalty factors bring the model closer to satisfying these properties. In the subsequent section, we explore the presence of equilibrium states in a general delegation game utilizing the proposed voting measure. In contrast to the classical model, we demonstrate that this game exhibits pure strategy Nash equilibria, contingent upon the imposition of a penalty on the length of delegation chains.},
  copyright = {Creative Commons Attribution 4.0 International},
  keywords = {FOS: Computer and information sciences,Multiagent Systems (cs.MA)}
}

@article{boldiViscousDemocracySocial2011,
  title = {Viscous Democracy for Social Networks},
  author = {Boldi, Paolo and Bonchi, Francesco and Castillo, Carlos and Vigna, Sebastiano},
  year = {2011},
  month = jun,
  journal = {Communications of the ACM},
  volume = {54},
  number = {6},
  pages = {129--137},
  issn = {0001-0782, 1557-7317},
  doi = {10.1145/1953122.1953154},
  urldate = {2025-06-17},
  abstract = {Decision-making procedures in online social networks should reflect participants' political influence within the network.},
  langid = {english},
  file = {/Users/DavidHolzwarth/Zotero/storage/SUL7C9D5/Boldi et al. - 2011 - Viscous democracy for social networks.pdf}
}

@inproceedings{brillInteractiveDemocracy2018,
  title = {Interactive {{Democracy}}},
  booktitle = {Proceedings of the 17th {{International Conference}} on {{Autonomous Agents}} and {{MultiAgent Systems}}},
  author = {Brill, Markus},
  year = {2018},
  pages = {1183--1187},
  publisher = {{International Foundation for Autonomous Agents and Multiagent Systems}},
  address = {Stockholm, Sweden},
  urldate = {2025-06-18}
}

@misc{degraveResolvingMultiproxyTransitive2014a,
  title = {Resolving Multi-Proxy Transitive Vote Delegation},
  author = {Degrave, Jonas},
  year = {2014},
  month = dec,
  number = {arXiv:1412.4039},
  eprint = {1412.4039},
  primaryclass = {cs},
  publisher = {arXiv},
  doi = {10.48550/arXiv.1412.4039},
  urldate = {2025-06-17},
  abstract = {Solving a delegation graph for transitive votes is already a non-trivial task for many programmers. When extending the current main paradigm, where each voter can only appoint a single transitive delegation, to a system where each vote can be separated over multiple delegations, solving the delegation graph becomes even harder. This article presents a solution of an example graph, and a non-formal proof of why this algorithm works.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Multiagent Systems},
  file = {/Users/DavidHolzwarth/Zotero/storage/S5EFDUXU/Degrave - 2014 - Resolving multi-proxy transitive vote delegation.pdf;/Users/DavidHolzwarth/Zotero/storage/GKNM8K7R/1412.html}
}

@misc{fordLiquidPerspectiveDemocratic2020,
  title = {A {{Liquid Perspective}} on {{Democratic Choice}}},
  author = {Ford, Bryan},
  year = {2020},
  month = mar,
  number = {arXiv:2003.12393},
  eprint = {2003.12393},
  primaryclass = {cs},
  publisher = {arXiv},
  doi = {10.48550/arXiv.2003.12393},
  urldate = {2025-06-03},
  abstract = {The idea of liquid democracy responds to a widely-felt desire to make democracy more "fluid" and continuously participatory. Its central premise is to enable users to employ networked technologies to control and delegate voting power, to approximate the ideal of direct democracy in a scalable fashion that accounts for time and attention limits. There are many potential definitions, meanings, and ways to implement liquid democracy, however, and many distinct purposes to which it might be deployed. This paper develops and explores the "liquid" notion and what it might mean for purposes of enhancing voter choice by spreading voting power, improving proportional representation systems, simplifying or aiding voters in their choice, or scaling direct democracy through specialization. The goal of this paper is to disentangle and further develop some of the many concepts and goals that liquid democracy ideas often embody, to explore their justification with respect to existing democratic traditions such as transferable voting and political parties, and to explore potential risks in liquid democracy systems and ways to address them.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Computers and Society,Computer Science - Social and Information Networks},
  file = {/Users/DavidHolzwarth/Zotero/storage/DSHYF5YL/Ford - 2020 - A Liquid Perspective on Democratic Choice.pdf;/Users/DavidHolzwarth/Zotero/storage/8N8VEIBD/2003.html}
}

@misc{forrestCBCUserGuide2005,
  title = {{{CBC User Guide}}},
  author = {Forrest, John and {Lougee-Heimer}, Robin},
  year = {2005},
  publisher = {CBC},
  urldate = {2025-06-17}
}

@inproceedings{hagbergExploringNetworkStructure2008,
  title = {Exploring {{Network Structure}}, {{Dynamics}}, and {{Function}} Using {{NetworkX}}},
  booktitle = {Python in {{Science Conference}}},
  author = {Hagberg, Aric A. and Schult, Daniel A. and Swart, Pieter J.},
  year = {2008},
  month = jun,
  pages = {11--15},
  address = {Pasadena, California},
  doi = {10.25080/TCWV9851},
  urldate = {2025-06-17},
  abstract = {NetworkX is a Python language package for exploration and analysis of networks and network algorithms. The core package provides data structures for representing many types of networks, or graphs, including simple graphs, directed graphs, and graphs with parallel edges and self-loops. The nodes in NetworkX graphs can be any (hashable) Python object and edges can contain arbitrary data; this flexibility makes NetworkX ideal for representing networks found in many different scientific fields. In addition to the basic data structures many graph algorithms are implemented for calculating network properties and structure measures: shortest paths, betweenness centrality, clustering, and degree distribution and many more. NetworkX can read and write various graph formats for easy exchange with existing data, and provides generators for many classic graphs and popular graph models, such as the Erdos-Renyi, Small World, and Barabasi-Albert models. The ease-of-use and flexibility of the Python programming language together with connection to the SciPy tools make NetworkX a powerful tool for scientific computations. We discuss some of our recent work studying synchronization of coupled oscillators to demonstrate how NetworkX enables research in the field of computational networks.},
  copyright = {https://creativecommons.org/licenses/by/3.0/},
  file = {/Users/DavidHolzwarth/Zotero/storage/A2I4CQUC/Hagberg et al. - 2008 - Exploring Network Structure, Dynamics, and Function using NetworkX.pdf}
}

@misc{johnforrestCoinorCbcRelease2024,
  title = {Coin-or/{{Cbc}}: {{Release}} Releases/2.10.12},
  shorttitle = {Coin-or/{{Cbc}}},
  author = {John Forrest and Ted Ralphs and Stefan Vigerske and Haroldo Gambini Santos and Lou Hafer and Bjarni Kristjansson and {jpfasano} and EdwinStraver and {Jan-Willem} and Miles Lubin and {rlougee} and {a-andre} and {jpgoncal1} and Samuel Brito and {h-i-gassmann} and Cristina and Matthew Saltzman and {tosttost} and Bruno Pitrus and Fumiaki MATSUSHIMA and Patrick Vossler and Ron @ SWGY and {to-st}},
  year = {2024},
  month = aug,
  doi = {10.5281/ZENODO.2720283},
  urldate = {2025-06-17},
  abstract = {COIN-OR Branch-and-Cut solver},
  copyright = {Creative Commons Attribution 4.0 International},
  howpublished = {Zenodo}
}

@misc{klingVotingBehaviourPower2015,
  title = {Voting {{Behaviour}} and {{Power}} in {{Online Democracy}}: {{A Study}} of {{LiquidFeedback}} in {{Germany}}'s {{Pirate Party}}},
  shorttitle = {Voting {{Behaviour}} and {{Power}} in {{Online Democracy}}},
  author = {Kling, Christoph Carl and Kunegis, Jerome and Hartmann, Heinrich and Strohmaier, Markus and Staab, Steffen},
  year = {2015},
  month = mar,
  number = {arXiv:1503.07723},
  eprint = {1503.07723},
  primaryclass = {cs},
  publisher = {arXiv},
  doi = {10.48550/arXiv.1503.07723},
  urldate = {2025-06-18},
  abstract = {In recent years, political parties have adopted Online Delegative Democracy platforms such as LiquidFeedback to organise themselves and their political agendas via a grassroots approach. A common objection against the use of these platforms is the delegation system, where a user can delegate his vote to another user, giving rise to so-called super-voters, i.e. powerful users who receive many delegations. It has been asserted in the past that the presence of these super-voters undermines the democratic process, and therefore delegative democracy should be avoided. In this paper, we look at the emergence of super-voters in the largest delegative online democracy platform worldwide, operated by Germany's Pirate Party. We investigate the distribution of power within the party systematically, study whether super-voters exist, and explore the influence they have on the outcome of votings conducted online. While we find that the theoretical power of super-voters is indeed high, we also observe that they use their power wisely. Super-voters do not fully act on their power to change the outcome of votes, but they vote in favour of proposals with the majority of voters in many cases thereby exhibiting a stabilising effect on the system. We use these findings to present a novel class of power indices that considers observed voting biases and gives significantly better predictions than state-of-the-art measures.},
  archiveprefix = {arXiv},
  keywords = {Computer Science - Computers and Society,Computer Science - Social and Information Networks},
  file = {/Users/DavidHolzwarth/Zotero/storage/VII28LU6/Kling et al. - 2015 - Voting Behaviour and Power in Online Democracy A Study of LiquidFeedback in Germany's Pirate Party.pdf;/Users/DavidHolzwarth/Zotero/storage/GGKHUV8H/1503.html}
}

@techreport{liSuperLUUsersGuide1999,
  type = {Tech Report},
  title = {{{SuperLU Users}}' {{Guide}}},
  author = {Li, X.S. and Demmel, J.W. and Gilbert, J.R. and Grigori, L. and Shao, M. and Yamazaki, I.},
  year = {1999},
  month = sep,
  number = {LBNL-44289},
  institution = {Lawrence Berkeley National Laboratory},
  urldate = {2025-06-17},
  annotation = {Last update: June 2018}
}

@misc{osullivanPuLPLinearProgramming2011,
  title = {{{PuLP}} : {{A Linear Programming Toolkit}} for {{Python}}},
  author = {O'Sullivan, Michael and Mitchell, Stuart and Dunning, Iain},
  year = {2011}
}

@misc{pythonsoftwarefoundationPythonTutorialSection,
  title = {The {{Python Tutorial}}, {{Section}} 5: {{Data Structures}}},
  author = {{Python Software Foundation}},
  urldate = {2025-05-17}
}

@article{virtanenSciPy10Fundamental2020,
  title = {{{SciPy}} 1.0: Fundamental Algorithms for Scientific Computing in {{Python}}},
  shorttitle = {{{SciPy}} 1.0},
  author = {Virtanen, Pauli and Gommers, Ralf and Oliphant, Travis E. and Haberland, Matt and Reddy, Tyler and Cournapeau, David and Burovski, Evgeni and Peterson, Pearu and Weckesser, Warren and Bright, Jonathan and Van Der Walt, St{\'e}fan J. and Brett, Matthew and Wilson, Joshua and Millman, K. Jarrod and Mayorov, Nikolay and Nelson, Andrew R. J. and Jones, Eric and Kern, Robert and Larson, Eric and Carey, C J and Polat, {\.I}lhan and Feng, Yu and Moore, Eric W. and VanderPlas, Jake and Laxalde, Denis and Perktold, Josef and Cimrman, Robert and Henriksen, Ian and Quintero, E. A. and Harris, Charles R. and Archibald, Anne M. and Ribeiro, Ant{\^o}nio H. and Pedregosa, Fabian and Van Mulbregt, Paul and {SciPy 1.0 Contributors} and Vijaykumar, Aditya and Bardelli, Alessandro Pietro and Rothberg, Alex and Hilboll, Andreas and Kloeckner, Andreas and Scopatz, Anthony and Lee, Antony and Rokem, Ariel and Woods, C. Nathan and Fulton, Chad and Masson, Charles and H{\"a}ggstr{\"o}m, Christian and Fitzgerald, Clark and Nicholson, David A. and Hagen, David R. and Pasechnik, Dmitrii V. and Olivetti, Emanuele and Martin, Eric and Wieser, Eric and Silva, Fabrice and Lenders, Felix and Wilhelm, Florian and Young, G. and Price, Gavin A. and Ingold, Gert-Ludwig and Allen, Gregory E. and Lee, Gregory R. and Audren, Herv{\'e} and Probst, Irvin and Dietrich, J{\"o}rg P. and Silterra, Jacob and Webber, James T and Slavi{\v c}, Janko and Nothman, Joel and Buchner, Johannes and Kulick, Johannes and Sch{\"o}nberger, Johannes L. and De Miranda Cardoso, Jos{\'e} Vin{\'i}cius and Reimer, Joscha and Harrington, Joseph and Rodr{\'i}guez, Juan Luis Cano and {Nunez-Iglesias}, Juan and Kuczynski, Justin and Tritz, Kevin and Thoma, Martin and Newville, Matthew and K{\"u}mmerer, Matthias and Bolingbroke, Maximilian and Tartre, Michael and Pak, Mikhail and Smith, Nathaniel J. and Nowaczyk, Nikolai and Shebanov, Nikolay and Pavlyk, Oleksandr and Brodtkorb, Per A. and Lee, Perry and McGibbon, Robert T. and Feldbauer, Roman and Lewis, Sam and Tygier, Sam and Sievert, Scott and Vigna, Sebastiano and Peterson, Stefan and More, Surhud and Pudlik, Tadeusz and Oshima, Takuya and Pingel, Thomas J. and Robitaille, Thomas P. and Spura, Thomas and Jones, Thouis R. and Cera, Tim and Leslie, Tim and Zito, Tiziano and Krauss, Tom and Upadhyay, Utkarsh and Halchenko, Yaroslav O. and {V{\'a}zquez-Baeza}, Yoshiki},
  year = {2020},
  month = mar,
  journal = {Nature Methods},
  volume = {17},
  number = {3},
  pages = {261--272},
  issn = {1548-7091, 1548-7105},
  doi = {10.1038/s41592-019-0686-2},
  urldate = {2025-06-17},
  abstract = {Abstract             SciPy is an open-source scientific computing library for the Python programming language. Since its initial release in 2001, SciPy has become a de facto standard for leveraging scientific algorithms in Python, with over 600 unique code contributors, thousands of dependent packages, over 100,000 dependent repositories and millions of downloads per year. In this work, we provide an overview of the capabilities and development practices of SciPy 1.0 and highlight some recent technical developments.},
  langid = {english},
  file = {/Users/DavidHolzwarth/Zotero/storage/HAFDHMKR/Virtanen et al. - 2020 - SciPy 1.0 fundamental algorithms for scientific computing in Python.pdf}
}
